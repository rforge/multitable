ndims
innames
innames <- lapply(l,get.input.names)#
innames[[1]][[1]] <- letters[1:9]
innames
ndims <- lapply(innames,length)
unique.dimnames <- unique(unlist(innames,recursive=FALSE))
mat.ndims <- lapply(innames,match,unique.dimnames)
identical(ndims,lapply(mat.ndims,length))
ndims
unique.dimnames
mat.ndims
ndims
innames <- lapply(l,get.input.names)#
innames[[1]][[1]] <- NULL#
#
ndims <- lapply(innames,length)#
unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
mat.ndims <- lapply(innames,match,unique.dimnames)#
identical(ndims,lapply(mat.ndims,length))#
#
innames[[1]]==innames[[2]][[1]]
ndims
unique.dimnames
mat.ndims
ndims
innames <- lapply(l,get.input.names)#
innames[[1]][[1]] <- NULL#
#
ndims <- sapply(innames,length)#
unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
mat.ndims <- lapply(innames,match,unique.dimnames)#
ndims==sapply(mat.ndims,length)
ndims
sapply(mat.ndims,length)
mat.ndims
identical(ndims,sapply(mat.ndims,length))
any(!ndims)
innames <- lapply(l,get.input.names)#
#innames[[1]][[1]] <- NULL#
#
ndims <- sapply(innames,length)#
any(!ndims)
innames <- lapply(l,get.input.names)#
#innames[[1]][[1]] <- NULL#
#
ndims <- sapply(innames,length)#
all(ndims)
innames <- lapply(l,get.input.names)#
innames[[1]][[1]] <- NULL#
#
ndims <- sapply(innames,length)#
all(ndims)
innames <- lapply(l,get.input.names)#
innames[[1]][[1]] <- NULL#
#
ndims <- sapply(innames,length)
unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
	mat.ndims <- lapply(innames,match,unique.dimnames)
mat.ndims
innames <- lapply(l,get.input.names)#
#innames[[1]][[1]] <- NULL#
#
ndims <- sapply(innames,length)
	unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
	mat.ndims <- lapply(innames,match,unique.dimnames)
mat.ndims
get.input.dims <- function(xi){#
	if(is.null(dim(xi)) & is.atomic(xi)) return(length(xi))#
	else if(is.recursive(xi) & is.atomic(xi[[1]])){#
		if(is.null(dim(xi[[1]]))) return(length(xi[[1]]))#
		else return(dim(xi[[1]]))#
	}#
	else if(is.recursive(xi)) stop("recursive tables must contain only atomic elements")#
	else return(dim(xi))#
}
innames <- lapply(x,get.input.names)#
	ndims <- sapply(innames,length)#
	if(all(ndims)){#
		unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
	}#
	else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
	}
	innames <- lapply(x,get.input.names)#
	ndims <- sapply(innames,length)#
	if(all(ndims)){#
		unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
	}
else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
	}
indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]
indims
x
x <- l;
x <- l
innames <- lapply(x,get.input.names)#
	ndims <- sapply(innames,length)#
	if(all(ndims)){#
		unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
	}#
	else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
	}
indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]
indims
wfr
indims.wfr
mat.ndims
indims.wfr
match(indims[[i]],indims.wfr)
i
match.dnames <- list()#
	for(i in seq_along(indims)){#
		match.dnames[[i]] <- dnames[match(indims[[i]],indims.wfr)]#
	}
i <- 1
match(indims[[i]],indims.wfr)
match(indims[[2]],indims.wfr)
match(indims[[3]],indims.wfr)
indims.wfr
indims
mat.ndims
lapply(indims,match,indims.wfr)
indims.wfr
ndims
unique.dimnames
mat.ndims
mat.ndims <- lapply(indims,match,indims.wfr)
mat.ndims
lapply(mat.ndims,match,indims.wfr)
mat.ndims
indims.wfr
dnames
dnames <- paste("D",seq_along(indims.wfr),sep="")
dnames
dnames(mat.ndims)
dnames[mat.ndims]
dnames[[mat.ndims]]
lapply(mat.ndims,"[",x=dnames)
mat.ndims
lapply(mat.ndims,function(ii)dnames[ii])
match.dnames <- list()#
	innames <- lapply(x,get.input.names)#
	ndims <- sapply(innames,length)#
	if(all(ndims)){#
		unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
		indims.wfr <- sapply(unique.dimnames,length)#
	}#
	else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
		if(length(unique(indims.wfr)) < length(indims.wfr)){#
			stop("Some dimensions are unnamed and some are of the same length and therefore require specification of match.dnames. Type ?data.list and see the details section of the help file for data.list.")#
		}#
		mat.ndims <- lapply(indims,match,indims.wfr)#
	}
#
make.match.dnames <- function(x,dnames){#
	match.dnames <- list()#
	innames <- lapply(x,get.input.names)#
	ndims <- sapply(innames,length)#
	if(all(ndims)){#
		unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
		indims.wfr <- sapply(unique.dimnames,length)#
	}#
	else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
		if(length(unique(indims.wfr)) < length(indims.wfr)){#
			stop("Some dimensions are unnamed and some are of the same length and therefore require specification of match.dnames. Type ?data.list and see the details section of the help file for data.list.")#
		}#
		mat.ndims <- lapply(indims,match,indims.wfr)#
	}#
	if(missing(dnames)) dnames <- paste("D",seq_along(indims.wfr),sep="")#
	match.dnames <- lapply(mat.ndims,function(ii)dnames[ii])#
	#
	#for(i in seq_along(indims))#
	#	match.dnames[[i]] <- dnames[match(indims[[i]],indims.wfr)]#
	#
	return(match.dnames)#
}
make.match.dnames(x)
l
innames[[1]][[1]] <- NULL
l
a1 <- matrix(runif(50),10,5)#
a2 <- matrix(runif(50),10,5)#
a3 <- matrix(runif(50),10,5)#
dimnames(a1) <- dimnames(a2) <- dimnames(a3) <- list(letters[1:10],letters[11:15])#
a <- list(a1,a2,a3)#
b <- runif(10)#
#names(b) <- letters[1:10]#
c <- letters[1:5]#
names(c) <- letters[11:15]#
data.list(b,a,c)#
l <- list(b,a,c)
make.match.dnames(l)
l
make.match.dnames <- function(x,dnames){#
	match.dnames <- list()#
	innames <- lapply(x,get.input.names)#
	ndims <- sapply(innames,length)#
	if(all(ndims)){#
		unique.dimnames <- unique(unlist(innames,recursive=FALSE))#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
		indims.wfr <- sapply(unique.dimnames,length)#
		print("A")#
	}#
	else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
		if(length(unique(indims.wfr)) < length(indims.wfr)){#
			stop("Some dimensions are unnamed and some are of the same length and therefore require specification of match.dnames. Type ?data.list and see the details section of the help file for data.list.")#
		}#
		mat.ndims <- lapply(indims,match,indims.wfr)#
		print("B")#
	}#
	if(missing(dnames)) dnames <- paste("D",seq_along(indims.wfr),sep="")#
	match.dnames <- lapply(mat.ndims,function(ii)dnames[ii])#
	return(match.dnames)#
}
make.match.dnames(l)
l
debug(make.match.dnames)
make.match.dnames(l)
ndims
x
innames
sapply(innames,length)
innames <- lapply(l,get.input.names)#
innames[[1]][[1]] <- NULL#
#
ndims <- sapply(innames,length)
Q
innames <- lapply(l,get.input.names)#
innames[[1]][[1]] <- NULL#
#
ndims <- sapply(innames,length)
ndims
x
l
make.match.dnames(l)
x
innames
Q
make.match.dnames <- function(x,dnames){#
	match.dnames <- list()#
	innames <- lapply(x,get.input.names)#
	ulinnames <- unlist(innames,recursive=FALSE)#
	return(ulinnames)#
	#ndims <- sapply(innames,length)#
	if(all(ndims)){#
		unique.dimnames <- unique()#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
		indims.wfr <- sapply(unique.dimnames,length)#
		print("A")#
	}#
	else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
		if(length(unique(indims.wfr)) < length(indims.wfr)){#
			stop("Some dimensions are unnamed and some are of the same length and therefore require specification of match.dnames. Type ?data.list and see the details section of the help file for data.list.")#
		}#
		mat.ndims <- lapply(indims,match,indims.wfr)#
		print("B")#
	}#
	if(missing(dnames)) dnames <- paste("D",seq_along(indims.wfr),sep="")#
	match.dnames <- lapply(mat.ndims,function(ii)dnames[ii])#
	return(match.dnames)#
}
make.match.dnames(l)
sapply(make.match.dnames(l),is.null)
!sapply(make.match.dnames(l),is.null)
all(!sapply(make.match.dnames(l),is.null))
make.match.dnames <- function(x,dnames){#
	match.dnames <- list()#
	innames <- lapply(x,get.input.names)#
	ulinnames <- unlist(innames,recursive=FALSE)#
	notnullnames <- !sapply(make.match.dnames(ulinnames),is.null)#
	#ndims <- sapply(innames,length)#
	if(all(notnullnames)){#
		unique.dimnames <- unique(ulinnames)#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
		indims.wfr <- sapply(unique.dimnames,length)#
		print("A")#
	}#
	else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
		if(length(unique(indims.wfr)) < length(indims.wfr)){#
			stop("Some dimensions are unnamed and some are of the same length and therefore require specification of match.dnames. Type ?data.list and see the details section of the help file for data.list.")#
		}#
		mat.ndims <- lapply(indims,match,indims.wfr)#
		print("B")#
	}#
	if(missing(dnames)) dnames <- paste("D",seq_along(indims.wfr),sep="")#
	match.dnames <- lapply(mat.ndims,function(ii)dnames[ii])#
	return(match.dnames)#
}
make.match.dnames(l)
debug(make.match.dnames)
make.match.dnames(l)
notnullnames
Q
make.match.dnames <- function(x,dnames){#
	match.dnames <- list()#
	innames <- lapply(x,get.input.names)#
	ulinnames <- unlist(innames,recursive=FALSE)#
	notnullnames <- !sapply(ulinnames,is.null)#
	#ndims <- sapply(innames,length)#
	if(all(notnullnames)){#
		unique.dimnames <- unique(ulinnames)#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
		indims.wfr <- sapply(unique.dimnames,length)#
		print("A")#
	}#
	else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
		if(length(unique(indims.wfr)) < length(indims.wfr)){#
			stop("Some dimensions are unnamed and some are of the same length and therefore require specification of match.dnames. Type ?data.list and see the details section of the help file for data.list.")#
		}#
		mat.ndims <- lapply(indims,match,indims.wfr)#
		print("B")#
	}#
	if(missing(dnames)) dnames <- paste("D",seq_along(indims.wfr),sep="")#
	match.dnames <- lapply(mat.ndims,function(ii)dnames[ii])#
	return(match.dnames)#
}
make.match.dnames(l)
a1 <- matrix(runif(50),10,5)#
a2 <- matrix(runif(50),10,5)#
a3 <- matrix(runif(50),10,5)#
dimnames(a1) <- dimnames(a2) <- dimnames(a3) <- list(letters[1:10],letters[11:15])#
a <- list(a1,a2,a3)#
b <- runif(10)#
names(b) <- letters[1:10]#
c <- letters[1:5]#
names(c) <- letters[11:15]#
data.list(b,a,c)#
l <- list(b,a,c)
make.match.dnames(l)
l
lapply(l,names)
#
make.match.dnames <- function(x,dnames){#
	match.dnames <- list()#
	check <- FALSE#
	innames <- lapply(x,get.input.names)#
	ulinnames <- unlist(innames,recursive=FALSE)#
	notnullnames <- !sapply(ulinnames,is.null)#
	if(all(notnullnames)){#
		unique.dimnames <- unique(ulinnames)#
		mat.ndims <- lapply(innames,match,unique.dimnames)#
		indims.wfr <- sapply(unique.dimnames,length)#
		check <- TRUE#
		print("A")#
	}#
	else{#
		indims <- lapply(x,get.input.dims)#
		wfr <- which.max(sapply(indims,length))#
		indims.wfr <- indims[[wfr]]#
		if(length(unique(indims.wfr)) < length(indims.wfr)){#
			stop("Some dimensions are unnamed and some are of the same length and therefore require specification of match.dnames. Type ?data.list and see the details section of the help file for data.list.")#
		}#
		mat.ndims <- lapply(indims,match,indims.wfr)#
		check <- FALSE#
		print("B")#
	}#
	if(missing(dnames)) dnames <- paste("D",seq_along(indims.wfr),sep="")#
	match.dnames <- lapply(mat.ndims,function(ii)dnames[ii])#
	if(check.full.rep(match.dnames) && check){#
		names(x[[1]]) <- dimnames(x[[1]]) <- NULL#
		match.dnames <- make.match.dnames(x,dnames)#
	}#
	return(match.dnames)#
}
make.match.dnames(l)
check.full.rep <-#
function(match.dnames){#
	mt <- match.dnames[[which.max(sapply(match.dnames,length))]]#
	dims <- lapply(match.dnames,match,table=mt)#
	any(sapply(dims,function(x)any(is.na(x))))#
}
make.match.dnames(l)
l
Letters[1:10]
LETTERS[1:10]
a1 <- matrix(runif(50),10,5)#
a2 <- matrix(runif(50),10,5)#
a3 <- matrix(runif(50),10,5)#
dimnames(a1) <- list(letters[1:10],letters[1:5])#
dimnames(a2) <- list(letters[11:20],letters[6:10])#
dimnames(a3) <- list(LETTERS[1:10],LETTERS[1:5])#
a <- list(a1,a2,a3)#
b <- runif(10)#
names(b) <- LETTERS[11:20]#
c <- letters[1:5]#
names(c) <- LETTERS[6:10]#
data.list(b,a,c)#
l <- list(b,a,c)
l
make.match.dnames(l)
library(multitable)
library(multitable)#
x <- lapply(c("throw.csv","throw2.csv","throw3.csv"),read.table,header=TRUE,sep=",")#
dlcast(x,paste("D",1:3,sep=""))
library(multitable)#
x <- lapply(c("throw.csv","throw2.csv","throw3.csv"),read.table,header=TRUE,sep=",")#
(dl <- dlcast(x,paste("D",1:3,sep="")))
as.data.frame(dl)
a1 <- matrix(runif(50),10,5)#
a2 <- matrix(runif(50),10,5)#
a3 <- matrix(runif(50),10,5)#
dimnames(a1) <- dimnames(a2) <- dimnames(a3) <- list(letters[1:10],letters[11:15])#
a <- list(a1,a2,a3)#
b <- runif(10)#
names(b) <- letters[1:10]#
c <- letters[1:5]#
names(c) <- letters[11:15]#
(dl <- data.list(b,a,c))
library(multitable)#
x <- lapply(c("throw.csv","throw2.csv","throw3.csv"),read.table,header=TRUE,sep=",")#
(dl <- dlcast(x,paste("D",1:3,sep="")))
t(dl)
a <- runif(10)#
b <- runif(10)#
names(a) <- names(b) <- letters[1:10]#
dl <- data.list(a,b)
(dl <- data.list(a,b))
t(dl)
a1 <- matrix(runif(50),10,5)#
a2 <- matrix(runif(50),10,5)#
a3 <- matrix(runif(50),10,5)#
dimnames(a1) <- list(letters[1:10],letters[1:5])#
dimnames(a2) <- list(letters[11:20],letters[6:10])#
dimnames(a3) <- list(LETTERS[1:10],LETTERS[1:5])#
a <- list(a1,a2,a3)#
b <- runif(10)#
names(b) <- LETTERS[11:20]#
c <- letters[1:5]#
names(c) <- LETTERS[6:10]#
dl <- (data.list(b,a,c))
(dl <- data.list(b,a,c))
fill
library(multitable)#
x <- lapply(c("throw.csv","throw2.csv","throw3.csv"),read.table,header=TRUE,sep=",")#
(dl <- dlcast(x,paste("D",1:3,sep="")))
(dl <- dlcast(x,paste("D",1:3,sep=""),0))
(dl <- dlcast(x,paste("D",1:3,sep=""),rep(0,3)))
(dl <- dlcast(x,paste("D",1:3,sep=""),rep(0,10)))
(dl <- dlcast(x,paste("D",1:3,sep=""),rep(0,2)))
(dl <- dlcast(x,paste("D",1:3,sep=""),rep(0,3)))
(dl <- dlcast(x,paste("D",1:3,sep=""),c(NA,0,0)))
(dl <- dlcast(x,paste("D",1:3,sep=""),c(NA,NA,0)))
library(multitable)#
x <- lapply(c("throw.csv","throw2.csv","throw3.csv"),read.table,header=TRUE,sep=",")#
(dl <- dlcast(x,paste("D",1:3,sep=""),c(NA,NA,0)))
?dlcast
library(multitable)
read.multitable(c("throw.csv","throw2.csv","throw3.csv"),paste("D",1:3,sep=""),c(NA,NA,0))
read.multitable(c("throw.csv","throw2.csv","throw3.csv"),paste("D",1:3,sep=""),c(NA,NA,0),sep=",")
library(multitable)#
files <- c("throw.csv","throw2.csv","throw3.csv")#
(dl <- read.multitable(files,paste("D",1:3,sep=""),c(NA,NA,0),sep=","))
?read.multitable
read.csv
?read.csv
library(multitable)#
files <- c("throw.csv","throw2.csv","throw3.csv")#
(dl <- read.multitable(files,paste("D",1:3,sep=""),c(NA,NA,0),sep=","))
dl
as.data.frame(dl)
dimnames(dl)
mouter <- function(x,...){#
	spouter <- function(x,y) outer(x,y,...)#
	Reduce("spouter",x)#
}
mouter(dimnames(dl))
mouter(dimnames(dl),FUN=paste,sep=".")
as.vector(mouter(dimnames(dl),FUN=paste,sep="."))
library(multitable)#
files <- c("throw.csv","throw2.csv","throw3.csv")#
(dl <- read.multitable(files,paste("D",1:3,sep=""),c(NA,NA,0),sep=","))
as.data.frame(dl)
data.list.mold(dl)
library(multitable)#
files <- c("throw.csv","throw2.csv","throw3.csv")#
(dl <- read.multitable(files,paste("D",1:3,sep=""),c(NA,NA,0),sep=","))
as.data.frame(dl)
a <- runif(10)#
b <- runif(10)#
names(a) <- names(b) <- letters[1:10]#
(dl <- data.list(a,b))
as.data.frame(dl)
a1 <- matrix(runif(50),10,5)#
a2 <- matrix(runif(50),10,5)#
a3 <- matrix(runif(50),10,5)#
dimnames(a1) <- dimnames(a2) <- dimnames(a3) <- list(letters[1:10],letters[11:15])#
a <- list(a1,a2,a3)#
b <- runif(10)#
names(b) <- letters[1:10]#
c <- letters[1:5]#
names(c) <- letters[11:15]#
(dl <- data.list(b,a,c))
as.data.frame(dl)
setwd("/users/stevenwalker/documents/multitable/multitable/vignettes/readingmultipletables/")
Sweave("/users/stevenwalker/documents/multitable/multitable/vignettes/readingmultipletables/readingmultipletables.Rnw")
setwd("/users/stevenwalker/documents/multitable/multitable/vignettes/readingmultipletables/")#
Sweave("/users/stevenwalker/documents/multitable/multitable/vignettes/readingmultipletables/readingmultipletables.Rnw")
Yname <- "abundance"
as.symbol(Yname)
read.table("throwY.csv")
setwd("/users/stevenwalker//")
read.table("throwY.csv")
read.table("throwY.csv",sep=",")
read.table("throwY.csv",sep=",",header=TRUE)
?read.table
read.table("throwY.csv",sep=",",header=TRUE)
read.table("throwY.csv",sep=",")
read.table("throwX.csv",sep=",")
read.table("throwZ.csv",sep=",")
read.fourthcorner("throwY.csv","throwX.csv","throwZ.csv")
read.fourthcorner <- function(Y, X, Z, dnames=c("sites","species"), Yname="abundance",...){#
	Y <- as.matrix(read.table(Y, ...))#
	X <- read.table(X, ...)#
	Z <- read.table(Z, ...)#
	match.dnames <- list(dnames,dnames[1],dnames[2])#
	Yname <- as.name(Yname)#
	data.list(Yname=Y,X,Z,match.dnames=match.dnames)#
}
read.fourthcorner("throwY.csv","throwX.csv","throwZ.csv")
library(multitable)
read.fourthcorner <- function(Y, X, Z, dnames=c("sites","species"), Yname="abundance",...){#
	Y <- as.matrix(read.table(Y, ...))#
	X <- read.table(X, ...)#
	Z <- read.table(Z, ...)#
	match.dnames <- list(dnames,dnames[1],dnames[2])#
	Yname <- as.name(Yname)#
	data.list(Yname=Y,X,Z,match.dnames=match.dnames)#
}
library(multitable)
read.fourthcorner("throwY.csv","throwX.csv","throwZ.csv")
read.table("throwY.csv",sep=",")
as.matrix(read.table("throwY.csv",sep=","))
as.matrix(read.table("throwY.csv",sep=","))[[1]]
read.table("throwY.csv",sep=",")[[1]]
read.fourthcorner("throwY.csv","throwX.csv","throwZ.csv",sep=",")
as.data.frame(read.fourthcorner("throwY.csv","throwX.csv","throwZ.csv",sep=","))
read.multitable <- function(files, dnames, tnames, fill = rep(NA,length(files)), ...){#
	x <- lapply(files, read.table, header = TRUE, ...)#
	names(x) <- if(missing(tnames)) make.names(files) else tnames#
	dl <- dlcast(x,dnames,fill)#
	return(dl)#
}#
#
read.multicsv <- function(files, dnames, tnames, fill = rep(NA,length(files)),...)#
	read.multitable(files, dnames, tnames, fill, sep=",", ...)#
	#
read.multidelim <- function(files, dnames, tnames, fill = rep(NA,length(files)),...)#
	read.multitable(files, dnames, tnames, fill, sep="\t", ...)#
#
read.fourthcorner <- function(Y, X, Z, dnames=c("sites","species"), Yname="abundance",...){#
	Y <- as.matrix(read.table(Y, ...))#
	X <- read.table(X, ...)#
	Z <- read.table(Z, ...)#
	match.dnames <- list(dnames,dnames[1],dnames[2])#
	dl <- data.list(Y,X,Z,match.dnames=match.dnames)#
	names(dl)[1] <- Yname#
	return(dl)#
}
read.fourthcorner("throwY.csv","throwX.csv","throwZ.csv",sep=",")
as.data.frame(read.fourthcorner("throwY.csv","throwX.csv","throwZ.csv",sep=","))
lm(abundance~(tmp+prcp)*bs,data=read.fourthcorner("throwY.csv","throwX.csv","throwZ.csv",sep=","))
library(multitable)
as.data.frame(read.fourthcorner("throwY.csv","throwX.csv","throwZ.csv",sep=","))
library(multitable)
?read.fourthcorner
library(multitable)
?read.fourthcorner
library(multitable)
?read.fourthcorner
library(multitable)
library(reshape2)
?reshape2
?package-reshape2
?cast
vignette
?vignette
vignette("mefa")
browseVignettes
browseVignettes()
library(multitable)
?multitable
library(multitable)
?multitable
library(multitable)
?multitable
library(multitable)
?multitable
library(multitable)
?multitable
library(multitable)
?multitable
browseVignettes()
?wdir
?wd
??directory
setwd("/readingmultipletables")
setwd("./readingmultipletables")
browseVignettes()
setwd("/users/stevenwalker/documents/multitable/multitable/pkg/multitable/inst/doc/")#
Sweave("/users/stevenwalker/documents/multitable/multitable/vignettes/readingmultipletables/readingmultipletables.Rnw")
setwd("/users/stevenwalker/documents/multitable/multitable/pkg/multitable/inst/doc/")#
Sweave("/users/stevenwalker/documents/multitable/multitable/pkg/multitable/inst/doc/readingmultipletables.Rnw")
